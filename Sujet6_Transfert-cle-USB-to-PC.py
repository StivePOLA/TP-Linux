import os
import shutil
import time

# D√©finir le r√©pertoire o√π le contenu de la cl√© USB sera copi√©
DEST_DIR = "/home/styve/Bureau/TP_Linux/Test/"

# Fonction pour d√©tecter si une cl√© USB est mont√©e
def get_mounted_usb():
    # Nom de l'utilisateur actuel (utilis√© pour construire le chemin des cl√©s USB)
    USER = os.getlogin()
    # Chemin par d√©faut o√π les p√©riph√©riques USB sont mont√©s sous Kali (pour l'utilisateur kali)
    media_path = f"/media/{USER}"
    
    # V√©rifier si ce dossier existe (parfois, il n'existe pas si aucun p√©riph√©rique n'a √©t√© mont√©)
    if not os.path.exists(media_path):     
        return None

    # Parcourir tous les dossiers mont√©s dans /media/Utilisateur
    for item in os.listdir(media_path):
        usb_path = os.path.join(media_path, item)
        # V√©rifier si l'√©l√©ment est bien un point de montage (cl√© USB ins√©r√©e)
        if os.path.ismount(usb_path):
            return usb_path  # Retourner le chemin de la cl√© USB
    return None  # Si aucune cl√© n'est trouv√©e

# Fonction qui copie le contenu de la cl√© USB vers un dossier local
def copy_usb_content(src, dest):
    # Cr√©er le dossier de destination s'il n'existe pas
    if not os.path.exists(dest):
        os.makedirs(dest)

    print(f"[INFO]üì§ Le transfert de fichiers de '{src}' vers '{dest}' est en cours")

    # Parcourir tous les fichiers et dossiers √† la racine de la cl√© USB
    for item in os.listdir(src):
        s = os.path.join(src, item)  # Chemin source complet
        d = os.path.join(dest, item)  # Chemin de destination

        try:
            # Si c'est un dossier, copier r√©cursivement tout le contenu
            if os.path.isdir(s):
                shutil.copytree(s, d, dirs_exist_ok=True)  # dirs_exist_ok=True permet d'√©craser les dossiers existants
            else:
                shutil.copy2(s, d)  # Copier un fichier unique avec ses m√©tadonn√©es
        except Exception as e:
            print(f"[ERREUR] ‚ùå √âchec lors du transfert de {item} : {e}")

# Fonction principale qui lance le processus de d√©tection et de copie
def main():
    print("[INFO]üîé Attente d'une cl√© USB...")

    # Boucle infinie pour surveiller en permanence l'arriv√©e d'une cl√© USB
    while True:
        usb_path = get_mounted_usb()  # V√©rifie si une cl√© est mont√©e
        if usb_path:
            print(f"üîó Cl√© USB d√©tect√©e : '{usb_path}'")
            # G√©n√©rer un nom unique pour chaque sauvegarde en utilisant la date et l'heure
            timestamp = time.strftime("%Y%m%d-%H%M%S")
            dest_path = os.path.join(DEST_DIR, f"usb_{timestamp}")

            # Lancer la copie de la cl√©
            copy_usb_content(usb_path, dest_path)

            print("[INFO] Copie termin√©e avec success ‚úÖ. En attente du retrait de la cl√©...")

            # Attendre que la cl√© soit retir√©e avant de continuer
            while get_mounted_usb():
                time.sleep(1)

            print(f"[INFO] Cl√© USB '{usb_path}' retir√©e. Nouvelle attenteüîé...")

        # Attendre 2 secondes avant de v√©rifier √† nouveau
        time.sleep(2)

# Point d‚Äôentr√©e du programme
if __name__ == "__main__":
    main()
